(*

Copyright Jeremy Siek and Manish Vachharajani, November 11, 2007

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*)

open Support.Pervasive
open Support.Error

let searchpath = ref [""]

type dot = Dot | Ladot
let dot_format = ref Dot
let debug = ref false
type inference_strategy = GradualInference | SimpleInference
let strategy = ref GradualInference

let argDefs = [
  "--debug",
      Arg.Unit (fun _ -> debug := true),
      "turn on debug output" ;
  "--simple",
      Arg.Unit (fun _ -> strategy := SimpleInference),
      "allow generalization of type variables that have unified against the dynamic type" ;
]

let parseArgs () =
  let inFile = ref (None : string option) in
  Arg.parse argDefs
     (fun s ->
       match !inFile with
         Some(_) -> err "You must specify exactly one input file"
       | None -> inFile := Some(s))
     "";
  match !inFile with
      None -> err "You must specify an input file"
    | Some(s) -> s

let openfile infile = 
  let rec trynext l = 
    match l with
      [] -> err ("Could not find input file: " ^ infile)
    | (d::rest) -> 
        let name = if d = "" then infile else (d ^ "/" ^ infile) in
        try (open_in name, name)
        with Sys_error m -> trynext rest
  in trynext !searchpath

let findfile infile = 
  let rec trynext l = 
    match l with
      [] -> err ("Could not find input file: " ^ infile)
    | (d::rest) -> 
        let name = if d = "" then infile else (d ^ "/" ^ infile) in
        try let f = open_in name in (close_in f; name)
        with Sys_error m -> trynext rest
  in trynext !searchpath

let openfile_write infile = 
  let rec trynext l = 
    match l with
      [] -> err ("Could not find input file: " ^ infile)
    | (d::rest) -> 
        let name = if d = "" then infile else (d ^ "/" ^ infile) in
        try open_out name
        with Sys_error m -> trynext rest
  in trynext !searchpath
    
let parseFile inFile =
  let (pi,filename) = openfile inFile
  in let lexbuf = Lexer.create filename pi
  in let result =
    try Parser.main Lexer.main lexbuf 
    with Parsing.Parse_error -> 
      error (Lexer.info lexbuf) "Parse error"
in
  Parsing.clear_parser(); close_in pi; result

