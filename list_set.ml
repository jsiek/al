(*

Copyright Jeremy Siek and Manish Vachharajani, November 11, 2007

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*)

let set_member eq x s = 
  List.exists (fun y -> eq x y) s

let rec set_diff eq s1 s2 =
  match s1 with
    [] -> []
  |	x::rest ->
      if (set_member eq x s2)
      then set_diff eq rest s2
      else x::(set_diff eq rest s2)

module type Eq =
  sig
    type t
    val eq : t -> t -> bool
  end

module Set =
  functor (Elt: Eq) ->
  struct
    type element = Elt.t
    type set = element list
    let empty = []
    let member x s = List.exists (fun y -> Elt.eq x y) s
    let add x s = if (member x s) then s else x::s
    let rec union s1 s2 =
      match s1 with
	[] -> s2
      |	x::rest ->
	  if (member x s2) 
	  then union rest s2
	  else x::(union rest s2)
    let rec inter s1 s2 =
      match s1 with
	[] -> []
      |	x::rest ->
	  if (member x s2) 
	  then x::(inter rest s2)
	  else inter rest s2
    let rec subset s1 s2 = 
      match s1 with
	[] -> true
      |	x::rest ->
	  member x s2 && subset rest s2
    let rec diff s1 s2 =
      match s1 with
	[] -> []
      |	x::rest ->
	  if (member x s2)
	  then diff rest s2
	  else x::(diff rest s2)
    let rec uniquify s =
      match s with
	[] -> []
      |	x::rest ->
	  if (member x rest) then (uniquify rest)
	  else x::(uniquify rest)
  end
