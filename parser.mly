%{
(*

Copyright Jeremy G. Siek, July 30, 2017

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*)

open Support.Error
open Support.Pervasive
open Ast
exception ParseError
%}
%token <int Support.Error.withinfo> INT 
%token <float Support.Error.withinfo> FLOAT 
%token <string Support.Error.withinfo> STRING 
%token <string Support.Error.withinfo> NAME

%token <Support.Error.info> INTTY
%token <Support.Error.info> BOOLTY
%token <Support.Error.info> FLOATTY
%token <Support.Error.info> STRUCT
%token <Support.Error.info> UNION
%token <Support.Error.info> TRUE
%token <Support.Error.info> FALSE
%token <Support.Error.info> QMARK
%token <Support.Error.info> LPAREN
%token <Support.Error.info> RPAREN
%token <Support.Error.info> LBRACK
%token <Support.Error.info> RBRACK
%token <Support.Error.info> LBRACE
%token <Support.Error.info> RBRACE
%token <Support.Error.info> LT
%token <Support.Error.info> GT
%token <Support.Error.info> EOL
%token <Support.Error.info> EOF

%token <Support.Error.info> LAMBDA
%token <Support.Error.info> TAG
%token <Support.Error.info> CASE
%token <Support.Error.info> OF
%token <Support.Error.info> HANDLE
%token <Support.Error.info> DOT
%token <Support.Error.info> COMMA
%token <Support.Error.info> EQUAL
%token <Support.Error.info> NOT
%token <Support.Error.info> AND
%token <Support.Error.info> OR
%token <Support.Error.info> LET
%token <Support.Error.info> IN
%token <Support.Error.info> IF
%token <Support.Error.info> THEN
%token <Support.Error.info> ELSE
%token <Support.Error.info> PLUS
%token <Support.Error.info> NEG
%token <Support.Error.info> MINUS
%token <Support.Error.info> MULT
%token <Support.Error.info> DIV
%token <Support.Error.info> ARRAY
%token <Support.Error.info> COLON
%token <Support.Error.info> SEMICOLON
%token <Support.Error.info> ARROW
%token <Support.Error.info> DUBARROW
%token <Support.Error.info> AMP
%token <Support.Error.info> BAR

%nonassoc simple_prec
%nonassoc LAMBDA DOT COMMA
%left COLON SEMICOLON
%right ARROW DUBARROW
%nonassoc INT LPAREN NAME 
%start main             /* the entry point */
%type <Ast.decl list> main
%type <Ast.expr> expr
%type <Ast.decl> decl
%type <Ast.ty> typ
  %%
main:
  decl_list EOF         { $1 }
  ;

typ:
  LPAREN typ RPAREN                    { $2 }
| INTTY                                { IntT $1 }
| BOOLTY                               { BoolT $1 }
| FLOATTY                              { FloatT $1 }
| LAMBDA typ_list ARROW typ            { ArrowT ($1, $2, $4) }
| NAME                                 { VarT ($1.i, $1.v) }
| STRUCT NAME                          { StructT ($1, $2.v) }
| UNION NAME                           { UnionT ($1, $2.v) }
| LBRACK typ RBRACK                    { ArrayT ($1, $2) }
| LT NAME GT typ                       { AllT ($1, $2.v, $4) }
;
typ_list:
  typ                                  { [$1] }
| typ COMMA typ_list                   { $1::$3 }
;
name_typ:
  NAME COLON typ                       { ($1.v,$3) }
;
name_typ_list:
                                     { [] }
| name_typ                           { [$1] }
| name_typ COMMA name_typ_list       { $1::$3 }
;
simple_expr:
  NAME           { VarE ($1.i, $1.v) }
| INT            { IntE ($1.i, $1.v) }
| TRUE           { BoolE ($1, true) }
| FALSE          { BoolE ($1, false) }
| FLOAT          { FloatE ($1.i, $1.v) }
| STRING         { StringE ($1.i, $1.v) }
| LPAREN expr RPAREN               { $2 }
| ARRAY expr LBRACK expr RBRACK    { ArrayE ($1, $2, $4) }
| NOT expr                         { PrimAppE ($1, "not", [$2]) }
| LAMBDA name_typ_list DOT expr    { LamE ($1, $2, $4) }
| STRUCT NAME LBRACE member_list RBRACE { StructE ($1, $2.v, $4) }
| UNION NAME LBRACE member RBRACE  { UnionE ($1, $2.v, $4) }
| CASE expr OF case_list           { CaseE ($1, $2, $4) }
| LET NAME EQUAL expr IN expr   { LetE ($1, $2.v, $4, $6) }
;
expr:
  simple_expr LPAREN expr_list RPAREN       { AppE ($2, $1, $3) }
| simple_expr LBRACK expr RBRACK            { IndexE ($2, $1, $3) }
| simple_expr DOT NAME                      { MemberE ($2, $1, $3.v) }
| simple_expr { $1 }
;
expr_list:
  expr { [$1] }
| expr COMMA expr_list { $1::$3 }
;
case:
  NAME DUBARROW expr { ($1.v,$3) }
;
case_list:
  case { [$1] }
| case BAR case_list { $1::$3 }
;
member:
  NAME EQUAL expr { ($1.v,$3) }
;
member_list:
                           { [] }
| member                   { [$1] }
| member COMMA member_list { $1::$3 } 
;
decl:
LAMBDA NAME LPAREN name_typ_list RPAREN typ EQUAL expr
  { FunD ($1, $2.v, $4, $6, $8) }
| STRUCT NAME LBRACE name_typ_list RBRACE
  { StructD ($1, $2.v, $4) }
;
decl_list:
  decl { [$1] }
| decl decl_list { $1::$2 }
;
